Title: Introduction

----

Intro: Blueprints are configuration files written in YAML that let you customize the (glossary: Panel) to make it truly yours.

----

Text:

If you click through the Panel in the (link: text: Starterkit) or the (link: text: Demo), you will notice that the forms for different page types all look different: they have a different layouts, different fields to fill in, different sections where you can upload files or add pages. All these different forms are powered by settings in so-called (glossary: blueprint text: blueprints).  Blueprints can go from very simple with just a few fields to highly complex with multiple tabs, columns, sections and many fields, depending on the type of project and your content types. If you have pages that require a lot of settings, careful planning is recommended.

Let's start with getting a basic understanding of blueprints.

<info>
If you examine the blueprints for the Starterkit, and compare that with what you actually see in the Panel, you should already get a good impression of how it all works. Don't be afraid to mess with it to see how changes you make are reflected in the Panel.
</info>

## Yaml syntax

Blueprints are written in `YAML` syntax. This syntax depends on correct indentation. Use spaces for indentation, not tabs, and 2 spaces per indentation level. See (link: #tips-tricks text: Tips & Tricks) at the end of this chapter.


## Blueprint types

Kirby has different blueprint types, which define the Panel views for `site`, `pages`, `files` and `users`. The `/site/blueprints` folder is structured accordingly:

```filesystem
/site/blueprints/site.yml
/site/blueprints/files/
/site/blueprints/pages/
/site/blueprints/users/
```

(reference: panel/blueprints)

<info>
The start page (also often refered to as the "Dashboard") of the Panel is defined in the `/site/blueprints/site.yml` blueprint.
</info>

## Presets

Kirby comes with three types of presets (`page`, `pages` and `files`) for blueprints that you can use to create single pages, blogs, galleries and more with almost zero configuration.

### When to use presets

Presets are great for simple page layouts that do not need a lot of customization. They can also be used inside (link: docs/guide/blueprints/tabs text: tabs).

If you know in advance that you need a highly customized Panel setup or you want to use the full power of blueprint options, don't start with presets.

(link: docs/guide/blueprints/presets text: Learn more about presets…)

## Custom layouts

If you want to go beyond the possibilities of Kirby's presets, you can be your own interface designer. You decide which features are needed for each type of page, file or user, and how to arrange them.

Kirby comes with the following layout features:

- (link: docs/guide/blueprints/tabs text: tabs)
- (link: docs/guide/blueprints/columns text: columns)
- (link: docs/guide/blueprints/sections text: sections)

(picture: tabs.png)

## Fields

With fields you can break your content into digestable chunks and structure it according to your content model, rather than storing everything in a single huge text field. You can add as many fields of different field types as you need.

(link: docs/guide/blueprints/fields text: Learn more about fields…)

## Query language

Kirby comes with a blueprint query language that offers basically the same functionality as Kirby's PHP API with a simple dot notation.

Use the query language to find parent pages for sections, fetch options for fields, or display and format information.

(link: docs/guide/blueprints/query-language text: Learn more about Kirby's blueprint query language…)

## Reusing blueprint parts

You can store fields, sections, tabs and entire blueprint layouts in separate files so that you can reuse them across blueprints. This helps to keep your blueprints clean, and is particularly useful if you find you use the same elements in different places. If you want, you can even create a complete component system to apply to multiple projects.

(link: docs/guide/blueprints/extending-blueprints text: Learn more about how to extend and reuse blueprints…)

## Translating blueprints

For editors from various language backgrounds, you can translate blueprint titles, form field labels, section headlines, help text, options, and more.

(link: docs/guide/blueprints/translations text: Learn more about translating blueprints…)

## Example blueprints

We have put together an extensive collection of example blueprints for typical setups like a blog, a shop, a project portfolio and more for you to use as a basis for your own.

(link: docs/reference/panel/samples text: Check out the example blueprints…)

## More docs

Our reference has more in-depth documentation about blueprints and their different components.

(link: docs/reference/panel text: Check out the reference…)

## Tips & Tricks

### General tips

- Install an extension for `YAML` support in your code editor. That way, indentation and other errors in your `YAML` code will be highlighted.

- If your blueprints are deeply nested, i.e. if they start at the tab level all the way down to fields, consider putting parts like individual tabs, columns or sections into separate files. This will prevent having to deal with deep indentation levels and keep your blueprints clean.

- Power users: Create snippets for your code editor that you can invoke with a shortcut.

- Power users: Create a library of reusable blueprints parts, see (link: docs/guide/blueprints/extending-blueprints text: extending blueprints).

### Using special characters in blueprint labels etc.

To use special characters in labels etc., wrap the text in double quotes:

```yaml
field1:
  label: "Fotograf*in"
  type: text
field2:
  label: "Must do: this"
  type: text
```  

### Naming fields

Make sure to only use alpha-numerical characters and underscores in field names. You cannot use dashes.

Yes:

```yaml
field_1:
  label: Headline
  type: text
```  

No:

```yaml
field-1:
  label: Headline
  type: text
```
